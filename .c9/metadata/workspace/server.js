{"filter":false,"title":"server.js","tooltip":"/server.js","undoManager":{"mark":2,"position":2,"stack":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":586,"column":0}},"nl":"\n","lines":["var http = require('http');","var path = require('path');","var moment = require('moment'); ","var time = require('time');","var cronJob = require('cron').CronJob;","","var async = require('async');","var socketio = require('socket.io');","var express = require('express');","","var app = express();","var server = http.createServer(app);","var io = socketio.listen(server);","","var database = require('./batch/database');","console.log('>>> moment ' + moment().utc().format(\"YYYYMMDD HH.mm.ss\"));","var job = new cronJob('00 00 3 * * *', function(){","    // Runs always at 03:00:00 AM","    console.log('>>> start job ' + moment().utc().format(\"YYYYMMDD HH.mm.ss\"));","    database.cleanDB();","  }, function () {","    // This function is executed when the job stops","    console.log('>>> ebd job ' + moment().utc().format(\"YYYYMMDD HH.mm.ss\"));","  },","  true,","  \"UTC\"",");","","var mongoose = require('mongoose');","var config = require('./config/config');","mongoose.connect('mongodb://' + config.mongo.user + ':' + config.mongo.password + '@' + config.mongo.host + ':' + config.mongo.port + '/' + config.mongo.db);","","var appRoute = require('./routes/app');","var api = require('./api/api');","","/** app config **/","app.configure(function () {","    app.use(express.logger('dev'));  /* 'default', 'short', 'tiny', 'dev' */","    app.use(express.compress()),","    app.use(express.methodOverride()),","    app.use(express.bodyParser()),","    app.use(express.static(path.join(__dirname, '/public')));","    app.engine('.html', require('ejs').__express);","    app.set('port', config.web.port);","    app.set('views', __dirname + '/views');","    app.set('view engine', 'html');","});","","app.configure('development', function(){","  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));","});","","app.configure('production', function(){","  app.use(express.errorHandler());","});","","console.log(app.get('env'));","","/** cross domain request **/","app.all('*', function(req, res, next){","  if (!req.get('Origin')) return next();","  res.set('Access-Control-Allow-Origin', '*');","  res.set('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE');","  res.set('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Cache-Control, authkey, username, lang, dir');","  if ('OPTIONS' == req.method) return res.send(200);","  next();","});","","/** app route view **/ ","app.get('/dashboard/:client_id', appRoute.dashboard);","app.get('/stat/:client_id', appRoute.stat);","","/** api route - RESTful webservice **/","app.get('/api/test', api.test);","","/** user api **/","app.get('/api/user/id/:id', api.findUserById);","app.get('/api/user/username/:username', api.findUserByUsername);","","app.post('/api/login', api.login);","app.post('/api/user', api.saveUser);","","app.put('/api/user/id/:id', api.updateUserById);","app.put('/api/user/activate/id/:id/key/:key', api.activateUserById);","app.put('/api/user/resetpwd/email/:email', api.resetUserPassword);","","app.delete('/api/user/id/:id', api.deleteUserById);","","/** site api **/","app.get('/api/site/id/:id', api.findSiteById);","app.get('/api/sites/username/:username', api.findSitesByUsername);","app.post('/api/site', api.saveSite);","app.put('/api/site/id/:id', api.updateSiteById);","app.delete('/api/site/id/:id', api.deleteSiteById);","","/** log api **/","app.get('/nodelog', api.setNodelog);","","/** stat api **/","app.get('/api/stats/daily/ua/:day/:client_id', api.getDailyUniqueAccess);","app.get('/api/stats/daily/pw/:day/:client_id', api.getDailyPageView);","","","/** get 404 error **/","app.all('*', function(req, res){","  res.send('mmmmhhh!!! ... ', 404);","});","","server.listen(app.get('port'), function () {","    console.log(\"Express server started and listening on port \" + app.get('port'));","});","","/** socket.io **/","var sockets = [];","var LogModel = require('./models/logModel');","var StatModel = require('./models/statModel');","var StatController = require('./controllers/statController').StatController;","var statController = new StatController();","","io.configure(function (){","  io.set('log level', 1);","  io.set(\"transports\", [\"xhr-polling\"]); ","  io.set(\"polling duration\", 10); ","});","","io.on('connection', function (socket) {","","    sockets.push(socket);","    ","    socket.on('create', function (name) {","        ","        socket.set('name', name);","        console.log ('>>> SET SOCKET ID ' + socket.id + ' - NAME ' + name) ;","      ","        var jsonObjStat = {};","        jsonObjStat.day = moment().format(\"YYYYMMDD\");","        jsonObjStat.client_id = name;","        ","        statController.get(jsonObjStat, function(err, statRes){","            if(statRes!=null) {","                var text = statRes;","                io.sockets.socket(socket.id).emit('num', text);","                console.log ('>>> SENT MESSAGE TO SOCKET ID ' + socket.id + ' - NAME ' + name + ' - client_id ' + statRes.client_id + ' - text ' +  JSON.stringify(text)) ;","            }","        });  ","    });","    ","    socket.on('disconnect', function () {","      sockets.splice(sockets.indexOf(socket), 1);","      console.log ('>>> DISCONNECT SOCKET ID ' + socket.id) ;","    });","","    LogModel.on('add', function(logRes) {","        ","        var text = logRes;","        console.log ('-------------------------------------------------'); ","        console.log ('>>> LOGMODEL ADD EVENT FIRED'); ","        console.log ('>>> NUMSOCKETS ' + sockets.length); ","        console.log ('>>> client_id ' + text.client_id);","        ","        socket.get('name', function (err, name) {","                ","            console.log ('>>> GET SOCKET ID ' + socket.id + ' - NAME ' + name);","            ","            if(name == text.client_id) {","                ","                io.sockets.socket(socket.id).emit('message', text);","                console.log ('>>> SENT MESSAGE TO SOCKET ID ' + socket.id + ' - NAME ' + name + ' - client_id ' + text.client_id + ' - text ' +  JSON.stringify(text)) ;","                ","            }","            else    {","                console.log ('>>> MESSAGE NOT SENT');","            }","                ","        });","         ","    });","    ","    StatModel.on('add', function(statRes) {","        ","        var text = statRes;","        console.log ('-------------------------------------------------'); ","        console.log ('>>> STATMODEL ADD EVENT FIRED'); ","        console.log ('>>> NUMSOCKETS ' + sockets.length); ","        console.log ('>>> client_id ' + text.client_id);","        ","        socket.get('name', function (err, name) {","                ","            console.log ('>>> GET SOCKET ID ' + socket.id + ' - NAME ' + name);","            ","            if(name == text.client_id) {","                ","                io.sockets.socket(socket.id).emit('num', text);","                console.log ('>>> SENT MESSAGE TO SOCKET ID ' + socket.id + ' - NAME ' + name + ' - client_id ' + text.client_id + ' - text ' +  JSON.stringify(text)) ;","                ","            }","            else    {","                console.log ('>>> MESSAGE NOT SENT');","            }","                ","        });","         ","    });","    ","    StatModel.on('change', function(statRes) {","        ","        var text = statRes;","        console.log ('-------------------------------------------------'); ","        console.log ('>>> STATMODEL CHANGE EVENT FIRED'); ","        console.log ('>>> NUMSOCKETS ' + sockets.length); ","        console.log ('>>> client_id ' + text.client_id);","        ","        socket.get('name', function (err, name) {","                ","            console.log ('>>> GET SOCKET ID ' + socket.id + ' - NAME ' + name);","            ","            if(name == text.client_id) {","                ","                io.sockets.socket(socket.id).emit('num', text);","                console.log ('>>> SENT MESSAGE TO SOCKET ID ' + socket.id + ' - NAME ' + name + ' - client_id ' + text.client_id + ' - text ' +  JSON.stringify(text)) ;","                ","            }","            else    {","                console.log ('>>> MESSAGE NOT SENT');","            }","                ","        });","         ","    });","    ","});var http = require('http');","var path = require('path');","var moment = require('moment'); ","var time = require('time');","var cronJob = require('cron').CronJob;","","var async = require('async');","var socketio = require('socket.io');","var express = require('express');","","var app = express();","var server = http.createServer(app);","var io = socketio.listen(server);","","var database = require('./batch/database');","console.log('>>> moment ' + moment().utc().format(\"YYYYMMDD HH.mm.ss\"));","var job = new cronJob('00 00 3 * * *', function(){","    // Runs always at 03:00:00 AM","    console.log('>>> start job ' + moment().utc().format(\"YYYYMMDD HH.mm.ss\"));","    database.cleanDB();","  }, function () {","    // This function is executed when the job stops","    console.log('>>> ebd job ' + moment().utc().format(\"YYYYMMDD HH.mm.ss\"));","  },","  true,","  \"UTC\"",");","","var mongoose = require('mongoose');","var config = require('./config/config');","mongoose.connect('mongodb://' + config.mongo.user + ':' + config.mongo.password + '@' + config.mongo.host + ':' + config.mongo.port + '/' + config.mongo.db);","","var appRoute = require('./routes/app');","var api = require('./api/api');","","/** app config **/","app.configure(function () {","    app.use(express.logger('dev'));  /* 'default', 'short', 'tiny', 'dev' */","    app.use(express.compress()),","    app.use(express.methodOverride()),","    app.use(express.bodyParser()),","    app.use(express.static(path.join(__dirname, '/public')));","    app.engine('.html', require('ejs').__express);","    app.set('port', config.web.port);","    app.set('views', __dirname + '/views');","    app.set('view engine', 'html');","});","","app.configure('development', function(){","  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));","});","","app.configure('production', function(){","  app.use(express.errorHandler());","});","","console.log(app.get('env'));","","/** cross domain request **/","app.all('*', function(req, res, next){","  if (!req.get('Origin')) return next();","  res.set('Access-Control-Allow-Origin', '*');","  res.set('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE');","  res.set('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Cache-Control, authkey, username, lang, dir');","  if ('OPTIONS' == req.method) return res.send(200);","  next();","});","","/** app route view **/ ","app.get('/dashboard/:client_id', appRoute.dashboard);","app.get('/stat/:client_id', appRoute.stat);","","/** api route - RESTful webservice **/","","/** user api **/","app.get('/api/user/id/:id', api.findUserById);","app.get('/api/user/username/:username', api.findUserByUsername);","","app.post('/api/login', api.login);","app.post('/api/user', api.saveUser);","","app.put('/api/user/id/:id', api.updateUserById);","app.put('/api/user/activate/id/:id/key/:key', api.activateUserById);","app.put('/api/user/resetpwd/email/:email', api.resetUserPassword);","","app.delete('/api/user/id/:id', api.deleteUserById);","","/** site api **/","app.get('/api/site/id/:id', api.findSiteById);","app.get('/api/sites/username/:username', api.findSitesByUsername);","app.post('/api/site', api.saveSite);","app.put('/api/site/id/:id', api.updateSiteById);","app.delete('/api/site/id/:id', api.deleteSiteById);","","/** log api **/","app.get('/nodelog', api.setNodelog);","","/** stat api **/","app.get('/api/stats/daily/ua/:day/:client_id', api.getDailyUniqueAccess);","app.get('/api/stats/daily/pw/:day/:client_id', api.getDailyPageView);","","","/** get 404 error **/","app.all('*', function(req, res){","  res.send('mmmmhhh!!! ... ', 404);","});","","server.listen(app.get('port'), function () {","    console.log(\"Express server started and listening on port \" + app.get('port'));","});","","/** socket.io **/","//var sockets = [];","var LogModel = require('./models/logModel');","var StatModel = require('./models/statModel');","var StatController = require('./controllers/statController').StatController;","var statController = new StatController();","","io.configure(function (){","  io.set('log level', 1);","  io.set(\"transports\", [\"xhr-polling\"]); ","  io.set(\"polling duration\", 10); ","});","","","io.on('connection', function (socket) {","    ","    console.log ('>>> CONNECT - SOCKET ID ' + socket.id) ;","    ","    socket.on('create', function (client_id) {","        ","        socket.client_id = client_id;","        //socket.join(socket.client_id);","        ","        console.log ('>>> CREATE - SOCKET ID ' + socket.id + ' - client_id ' + socket.client_id) ;","        ","        var jsonObjStat = {};","        jsonObjStat.day = moment().format(\"YYYYMMDD\");","        jsonObjStat.client_id = socket.client_id;","        ","        statController.get(jsonObjStat, function(err, statRes){","            if(statRes!=null) {","                var text = statRes;","        ","                //io.sockets.to(socket.client_id).emit('num', text);","                //socket.emit('num', text);","                //io.sockets.in(socket.client_id).emit('num', text);","                io.sockets.socket(socket.id).emit('num', text);","        ","                console.log ('>>> SEND MESSAGE - ID ' + socket.id + ' - client_id ' + socket.client_id + ' - text ' +  JSON.stringify(text)) ;","            }","        });  ","        ","    });","    ","    socket.on('change', function(new_client_id) {","        ","        var old_client_id;","        old_client_id = socket.client_id;","        ","        //socket.leave(socket.client_id);","        //socket.join(new_client_id);","        ","        socket.client_id = new_client_id;","        ","        //io.sockets.to(socket.client_id).emit('update', socket.client_id);","        //socket.emit('update', socket.client_id);","        io.sockets.socket(socket.id).emit('update', socket.client_id);","        ","        console.log ('>>> CHANGE WEBSITE - SOCKET ID ' + socket.id + ' - old_client_id ' + old_client_id + ' - new_client_id ' + new_client_id) ;","        ","        var jsonObjStat = {};","        jsonObjStat.day = moment().format(\"YYYYMMDD\");","        jsonObjStat.client_id = new_client_id;","        ","        statController.get(jsonObjStat, function(err, statRes){","            if(statRes!=null) {","                var text = statRes;","                ","                //io.sockets.to(socket.client_id).emit('num', text);","                //socket.emit('num', text);","                //io.sockets.in(socket.client_id).emit('num', text);","                io.sockets.socket(socket.id).emit('num', text);","                ","                console.log ('>>> SEND MESSAGE - SOCKET ID ' + socket.id + ' - client_id ' + socket.client_id + ' - text ' +  JSON.stringify(text)) ;","            }","        });  ","    });","    ","    socket.on('disconnect', function () {","        ","        //socket.leave(socket.client_id);","        console.log ('>>> DISCONNECT - SOCKET ID ' + socket.id + ' - client_id ' + socket.client_id) ;","        ","    });","    ","    LogModel.on('add', function(logRes) {","        ","        var text = logRes;","        console.log ('-------------------------------------------------'); ","        console.log ('>>> LOGMODEL ADD EVENT FIRED'); ","        console.log ('>>> client_id ' + text.client_id);","        ","        //io.sockets[\"in\"](socket.client_id).emit('message', text);","        //io.sockets.to(socket.client_id).emit('message', text);","        //io.sockets.socket(socket.id).emit('message', text);","        //socket.emit('message', text);","        //io.sockets.in(socket.client_id).emit('message', text, socket.id);","        io.sockets.socket(socket.id).emit('message', text, socket.id);","            ","        console.log ('>>> SEND MESSAGE - SOCKET ID ' + socket.id + ' - client_id ' + socket.client_id + ' - text ' +  JSON.stringify(text)) ;","            ","    });","    ","    StatModel.on('add', function(statRes) {","        ","        var text = statRes;","        //console.log ('-------------------------------------------------'); ","        //console.log ('>>> STATMODEL ADD EVENT FIRED'); ","        //console.log ('>>> client_id ' + text.client_id);","        ","        //io.sockets.to(socket.client_id).emit('num', text);","        //socket.emit('num', text);","        //io.sockets.in(socket.client_id).emit('num', text);","        io.sockets.socket(socket.id).emit('num', text);","            ","        //console.log ('>>> SEND MESSAGE - SOCKET ID ' + socket.id + ' - client_id ' + socket.client_id + ' - text ' +  JSON.stringify(text)) ;","         ","    });","    ","    StatModel.on('change', function(statRes) {","        ","        var text = statRes;","        //console.log ('-------------------------------------------------'); ","        //console.log ('>>> STATMODEL CHANGE EVENT FIRED'); ","        //console.log ('>>> client_id ' + text.client_id);","        ","        //io.sockets.to(socket.client_id).emit('num', text);","        //socket.emit('num', text);","        //io.sockets.in(socket.client_id).emit('num', text);","        io.sockets.socket(socket.id).emit('num', text);","            ","        //console.log ('>>> SEND MESSAGE - SOCKET ID ' + socket.id + ' - client_id ' + socket.client_id + ' - text ' +  JSON.stringify(text)) ;","         ","    });","    ","});","","/*","io.on('connection', function (socket) {","    ","    sockets.push(socket);","    ","    socket.on('identify', function (name) {","        ","        socket.set('name', name);","        console.log ('>>> SET SOCKET ID ' + socket.id + ' - NAME ' + name) ;","      ","        var jsonObjStat = {};","        jsonObjStat.day = moment().format(\"YYYYMMDD\");","        jsonObjStat.client_id = name;","        ","        statController.get(jsonObjStat, function(err, statRes){","            if(statRes!=null) {","                var text = statRes;","                io.sockets.socket(socket.id).emit('num', text);","                console.log ('>>> SENT MESSAGE TO SOCKET ID ' + socket.id + ' - NAME ' + name + ' - client_id ' + statRes.client_id + ' - text ' +  JSON.stringify(text)) ;","            }","        });  ","    });","    ","    socket.on('disconnect', function () {","      sockets.splice(sockets.indexOf(socket), 1);","      console.log ('>>> DISCONNECT SOCKET ID ' + socket.id) ;","    });","","    LogModel.on('add', function(logRes) {","        ","        var text = logRes;","        console.log ('-------------------------------------------------'); ","        console.log ('>>> LOGMODEL ADD EVENT FIRED'); ","        console.log ('>>> NUMSOCKETS ' + sockets.length); ","        console.log ('>>> client_id ' + text.client_id);","        ","        socket.get('name', function (err, name) {","                ","            console.log ('>>> GET SOCKET ID ' + socket.id + ' - NAME ' + name);","            ","            if(name == text.client_id) {","                ","                io.sockets.socket(socket.id).emit('message', text);","                console.log ('>>> SENT MESSAGE TO SOCKET ID ' + socket.id + ' - NAME ' + name + ' - client_id ' + text.client_id + ' - text ' +  JSON.stringify(text)) ;","                ","            }","            else    {","                console.log ('>>> MESSAGE NOT SENT');","            }","                ","        });","         ","    });","    ","    StatModel.on('add', function(statRes) {","        ","        var text = statRes;","        console.log ('-------------------------------------------------'); ","        console.log ('>>> STATMODEL ADD EVENT FIRED'); ","        console.log ('>>> NUMSOCKETS ' + sockets.length); ","        console.log ('>>> client_id ' + text.client_id);","        ","        socket.get('name', function (err, name) {","                ","            console.log ('>>> GET SOCKET ID ' + socket.id + ' - NAME ' + name);","            ","            if(name == text.client_id) {","                ","                io.sockets.socket(socket.id).emit('num', text);","                console.log ('>>> SENT MESSAGE TO SOCKET ID ' + socket.id + ' - NAME ' + name + ' - client_id ' + text.client_id + ' - text ' +  JSON.stringify(text)) ;","                ","            }","            else    {","                console.log ('>>> MESSAGE NOT SENT');","            }","                ","        });","         ","    });","    ","    StatModel.on('change', function(statRes) {","        ","        var text = statRes;","        console.log ('-------------------------------------------------'); ","        console.log ('>>> STATMODEL CHANGE EVENT FIRED'); ","        console.log ('>>> NUMSOCKETS ' + sockets.length); ","        console.log ('>>> client_id ' + text.client_id);","        ","        socket.get('name', function (err, name) {","                ","            console.log ('>>> GET SOCKET ID ' + socket.id + ' - NAME ' + name);","            ","            if(name == text.client_id) {","                ","                io.sockets.socket(socket.id).emit('num', text);","                console.log ('>>> SENT MESSAGE TO SOCKET ID ' + socket.id + ' - NAME ' + name + ' - client_id ' + text.client_id + ' - text ' +  JSON.stringify(text)) ;","                ","            }","            else    {","                console.log ('>>> MESSAGE NOT SENT');","            }","                ","        });","         ","    });","    ","});","*/"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":27}},"text":"var http = require('http');"},{"action":"insertText","range":{"start":{"row":0,"column":27},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":231,"column":0}},"lines":["var path = require('path');","var moment = require('moment'); ","var time = require('time');","var cronJob = require('cron').CronJob;","","var async = require('async');","var socketio = require('socket.io');","var express = require('express');","","var app = express();","var server = http.createServer(app);","var io = socketio.listen(server);","","var database = require('./batch/database');","console.log('>>> moment ' + moment().utc().format(\"YYYYMMDD HH.mm.ss\"));","var job = new cronJob('00 00 3 * * *', function(){","    // Runs always at 03:00:00 AM","    console.log('>>> start job ' + moment().utc().format(\"YYYYMMDD HH.mm.ss\"));","    database.cleanDB();","  }, function () {","    // This function is executed when the job stops","    console.log('>>> ebd job ' + moment().utc().format(\"YYYYMMDD HH.mm.ss\"));","  },","  true,","  \"UTC\"",");","","var mongoose = require('mongoose');","var config = require('./config/config');","mongoose.connect('mongodb://' + config.mongo.user + ':' + config.mongo.password + '@' + config.mongo.host + ':' + config.mongo.port + '/' + config.mongo.db);","","var appRoute = require('./routes/app');","var api = require('./api/api');","","/** app config **/","app.configure(function () {","    app.use(express.logger('dev'));  /* 'default', 'short', 'tiny', 'dev' */","    app.use(express.compress()),","    app.use(express.methodOverride()),","    app.use(express.bodyParser()),","    app.use(express.static(path.join(__dirname, '/public')));","    app.engine('.html', require('ejs').__express);","    app.set('port', config.web.port);","    app.set('views', __dirname + '/views');","    app.set('view engine', 'html');","});","","app.configure('development', function(){","  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));","});","","app.configure('production', function(){","  app.use(express.errorHandler());","});","","console.log(app.get('env'));","","/** cross domain request **/","app.all('*', function(req, res, next){","  if (!req.get('Origin')) return next();","  res.set('Access-Control-Allow-Origin', '*');","  res.set('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE');","  res.set('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Cache-Control, authkey, username, lang, dir');","  if ('OPTIONS' == req.method) return res.send(200);","  next();","});","","/** app route view **/ ","app.get('/dashboard/:client_id', appRoute.dashboard);","app.get('/stat/:client_id', appRoute.stat);","","/** api route - RESTful webservice **/","app.get('/api/test', api.test);","","/** user api **/","app.get('/api/user/id/:id', api.findUserById);","app.get('/api/user/username/:username', api.findUserByUsername);","","app.post('/api/login', api.login);","app.post('/api/user', api.saveUser);","","app.put('/api/user/id/:id', api.updateUserById);","app.put('/api/user/activate/id/:id/key/:key', api.activateUserById);","app.put('/api/user/resetpwd/email/:email', api.resetUserPassword);","","app.delete('/api/user/id/:id', api.deleteUserById);","","/** site api **/","app.get('/api/site/id/:id', api.findSiteById);","app.get('/api/sites/username/:username', api.findSitesByUsername);","app.post('/api/site', api.saveSite);","app.put('/api/site/id/:id', api.updateSiteById);","app.delete('/api/site/id/:id', api.deleteSiteById);","","/** log api **/","app.get('/nodelog', api.setNodelog);","","/** stat api **/","app.get('/api/stats/daily/ua/:day/:client_id', api.getDailyUniqueAccess);","app.get('/api/stats/daily/pw/:day/:client_id', api.getDailyPageView);","","","/** get 404 error **/","app.all('*', function(req, res){","  res.send('mmmmhhh!!! ... ', 404);","});","","server.listen(app.get('port'), function () {","    console.log(\"Express server started and listening on port \" + app.get('port'));","});","","/** socket.io **/","var sockets = [];","var LogModel = require('./models/logModel');","var StatModel = require('./models/statModel');","var StatController = require('./controllers/statController').StatController;","var statController = new StatController();","","io.configure(function (){","  io.set('log level', 1);","  io.set(\"transports\", [\"xhr-polling\"]); ","  io.set(\"polling duration\", 10); ","});","","io.on('connection', function (socket) {","","    sockets.push(socket);","    ","    socket.on('create', function (name) {","        ","        socket.set('name', name);","        console.log ('>>> SET SOCKET ID ' + socket.id + ' - NAME ' + name) ;","      ","        var jsonObjStat = {};","        jsonObjStat.day = moment().format(\"YYYYMMDD\");","        jsonObjStat.client_id = name;","        ","        statController.get(jsonObjStat, function(err, statRes){","            if(statRes!=null) {","                var text = statRes;","                io.sockets.socket(socket.id).emit('num', text);","                console.log ('>>> SENT MESSAGE TO SOCKET ID ' + socket.id + ' - NAME ' + name + ' - client_id ' + statRes.client_id + ' - text ' +  JSON.stringify(text)) ;","            }","        });  ","    });","    ","    socket.on('disconnect', function () {","      sockets.splice(sockets.indexOf(socket), 1);","      console.log ('>>> DISCONNECT SOCKET ID ' + socket.id) ;","    });","","    LogModel.on('add', function(logRes) {","        ","        var text = logRes;","        console.log ('-------------------------------------------------'); ","        console.log ('>>> LOGMODEL ADD EVENT FIRED'); ","        console.log ('>>> NUMSOCKETS ' + sockets.length); ","        console.log ('>>> client_id ' + text.client_id);","        ","        socket.get('name', function (err, name) {","                ","            console.log ('>>> GET SOCKET ID ' + socket.id + ' - NAME ' + name);","            ","            if(name == text.client_id) {","                ","                io.sockets.socket(socket.id).emit('message', text);","                console.log ('>>> SENT MESSAGE TO SOCKET ID ' + socket.id + ' - NAME ' + name + ' - client_id ' + text.client_id + ' - text ' +  JSON.stringify(text)) ;","                ","            }","            else    {","                console.log ('>>> MESSAGE NOT SENT');","            }","                ","        });","         ","    });","    ","    StatModel.on('add', function(statRes) {","        ","        var text = statRes;","        console.log ('-------------------------------------------------'); ","        console.log ('>>> STATMODEL ADD EVENT FIRED'); ","        console.log ('>>> NUMSOCKETS ' + sockets.length); ","        console.log ('>>> client_id ' + text.client_id);","        ","        socket.get('name', function (err, name) {","                ","            console.log ('>>> GET SOCKET ID ' + socket.id + ' - NAME ' + name);","            ","            if(name == text.client_id) {","                ","                io.sockets.socket(socket.id).emit('num', text);","                console.log ('>>> SENT MESSAGE TO SOCKET ID ' + socket.id + ' - NAME ' + name + ' - client_id ' + text.client_id + ' - text ' +  JSON.stringify(text)) ;","                ","            }","            else    {","                console.log ('>>> MESSAGE NOT SENT');","            }","                ","        });","         ","    });","    ","    StatModel.on('change', function(statRes) {","        ","        var text = statRes;","        console.log ('-------------------------------------------------'); ","        console.log ('>>> STATMODEL CHANGE EVENT FIRED'); ","        console.log ('>>> NUMSOCKETS ' + sockets.length); ","        console.log ('>>> client_id ' + text.client_id);","        ","        socket.get('name', function (err, name) {","                ","            console.log ('>>> GET SOCKET ID ' + socket.id + ' - NAME ' + name);","            ","            if(name == text.client_id) {","                ","                io.sockets.socket(socket.id).emit('num', text);","                console.log ('>>> SENT MESSAGE TO SOCKET ID ' + socket.id + ' - NAME ' + name + ' - client_id ' + text.client_id + ' - text ' +  JSON.stringify(text)) ;","                ","            }","            else    {","                console.log ('>>> MESSAGE NOT SENT');","            }","                ","        });","         ","    });","    ","});"]}]}],[{"group":"doc","deltas":[{"start":{"row":73,"column":0},"end":{"row":73,"column":1},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":73,"column":1},"end":{"row":73,"column":2},"action":"insert","lines":["/"]}]}]]},"ace":{"folds":[],"customSyntax":"javascript","scrolltop":1987,"scrollleft":0,"selection":{"start":{"row":127,"column":12},"end":{"row":127,"column":12},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":123,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1419254869299,"hash":"a31b4cd45b75ade170f0451393f502aa2261c212"}